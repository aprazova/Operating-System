Да се напишат две програми, наричани "сървър" и "клиент", които да
реализират опростена банка. В банката има осем сметки, означени
с главните букви 'A' до 'H' на латиница; във всяка от тези сметки има
целочислена сума, която може да бъде представена като 32-битово число
без знак. Сървърът пази информация за сумите в сметките във файл
с указано име; клиентите се свързват със сървъра чрез използване на
споделена памет с избран от Вас ключ и подават заявки за информация
или промяна на съдържанието на дадена сметка; сървърът изпълнява
заявката и връща информация чрез споделената памет.

При стартирането си сървърът приема пътя към файла, в който трябва да
пази информацията, като единствен параметър на командния ред. Файлът се
състои от осем записа, всеки от които е с размер четири байта и съдържа
цяло число без знак (uint32_t) в little-endian format. Ако файлът не
съществува, сървърът трябва да го създаде и да запише в него осем записа
с нулева сума. След това сървърът инициализира споделената памет и
семафорите, използвани за комуникация с клиентите, и изчаква заявки от
тях.

При стартирането си клиентът приема идентификатор на сметка (главна буква
от 'A' до 'H' на латиница) като единствен параметър на командния ред. Той
се свързва със сървъра и получава информация за текущата сума в указаната
сметка, след което извежда тази сума на стандартния си изход, последвана 
от символ за нов ред. След това клиентът прочита от стандартния си вход 
един ред текст, който е число, което може да бъде представено като 
16-битово цяло число със знак (int16_t). Клиентът изпраща на сървъра 
заявка за внасяне (ако числото е положително) или теглене (ако числото е
отрицателно) на съответната сума от указаната сметка. След успешно 
изпълнение на транзакцията, клиентът завършва изпълнението си с нулев 
exit код.

Цялата работа на клиента (запитване за текущото съдържание на сметката,
прочитане на операция от стандартния вход, обновяване на съдържанието на
сметката) трябва да бъде разглеждана като една-единствена атомарна
операция. Ако по същото време бъде стартиран друг клиент, който се
опитва да работи със същия сървър (дори не непременно със същата сметка),
вторият клиент трябва да изчака завършването на работата на първия.

Всяка успешно извършена от сървъра операция трябва незабавно да бъде
отразена във файла с данни. Ако сървърът получи невалидна заявка от 
клиент (невалиден идентификатор на сметка или някакво друго нарушение
на протокола за комуникация), той трябва да сигнализира за това на
клиента, като обяви заявката за неизпълнена.

Ако на някой етап от работата на клиента възникне грешка или ако
сървърът му сигнализира за невалидна заявка (невалиден идентификатор
на сметка или опит за извършване на операция, след която сумата в 
указаната сметка няма да може да бъде представена като 32-битово число
без знак), програмата трябва да уведоми потребителя и да прекрати 
изпълнението си с ненулев exit код, предварително освобождавайки всички
ресурси за комуникация със сървъра или с други клиенти.

Забележка: За целите на тази задача за преобразуване на ред текст в 
16-битово цяло число със знак е позволено да бъдат използвани функциите
scanf(), sscanf() или atoi() от стандартната библиотека на C, въпреки че
използването им в други програми е силно нежелателно, тъй като те
не извършват достатъчни проверки на входните данни (приемат низове,
които съдържат символи, различни от цифри, и не сигнализират за грешка).
В стандартната библиотека на C са дефинирани функциите strtol(),
strotul() и други подобни, които са по-подходящи, макар и проверката 
за възникнала при изпълнението им грешка да се състои от няколко стъпки. 
